Index: lib/calendar_helper.rb
===================================================================
--- lib/calendar_helper.rb	(revision 194)
+++ lib/calendar_helper.rb	(working copy)
@@ -22,7 +22,13 @@
   #                                             Use (0..2) for the first three letters, (0..0) for the first, and
   #                                             (0..-1) for the entire name.
   #   :first_day_of_week => 0                 # Renders calendar starting on Sunday. Use 1 for Monday, and so on.
-  # 
+  #   :accessible        => true              # Turns on accessibility mode. This suffixes dates within the
+  #                                           # calendar that are outside the range defined in the <caption> with 
+  #                                           # <span class="hidden"> MonthName</span>
+  #
+  #                                           # You'll need to define an appropriate style in order to make this disappear. 
+  #                                           # Choose your own method of hiding content appropriately.
+  #
   # For more customization, you can pass a code block to this method, that will get one argument, a Date object,
   # and return a values for the individual table cells. The block can return an array, [cell_text, cell_attrs],
   # cell_text being the text that is displayed and cell_attrs a hash containing the attributes for the <td> tag
@@ -63,7 +69,8 @@
       :day_name_class => 'dayName',
       :day_class => 'day',
       :abbrev => (0..2),
-      :first_day_of_week => 0
+      :first_day_of_week => 0,
+      :accessible => false
     }
     options = defaults.merge options
 
@@ -79,13 +86,23 @@
     end
 
     cal = %(<table class="#{options[:table_class]}" border="0" cellspacing="0" cellpadding="0">) 
-    cal << %(<thead><tr class="#{options[:month_name_class]}"><th colspan="7">#{Date::MONTHNAMES[options[:month]]}</th></tr><tr class="#{options[:day_name_class]}">)
-    day_names.each {|d| cal << "<th>#{d[options[:abbrev]]}</th>"}
+    cal << %(<caption class="#{options[:month_name_class]}"></caption><thead><th colspan="7">#{Date::MONTHNAMES[options[:month]]}</th></tr><tr class="#{options[:day_name_class]}">)
+    day_names.each do |d|
+      unless d[options[:abbrev]].eql? d
+        cal << "<th scope='col'><abbr title='#{d}'>#{d[options[:abbrev]]}</abbr></th>"
+      else
+        cal << "<th scope='col'>#{d[options[:abbrev]]}</th>"
+      end
+    end
     cal << "</tr></thead><tbody><tr>"
     beginning_of_week(first, first_weekday).upto(first - 1) do |d|
       cal << %(<td class="#{options[:other_month_class]})
       cal << " weekendDay" if weekend?(d)
-      cal << %(">#{d.day}</td>)
+      if options[:accessible]
+        cal << %(">#{d.day}<span class="hidden"> #{Date::MONTHNAMES[d.month]}</span></td>)
+      else
+        cal << %(">#{d.day}</td>)
+      end
     end unless first.wday == first_weekday
     first.upto(last) do |cur|
       cell_text, cell_attrs = block.call(cur)
@@ -99,7 +116,11 @@
     (last + 1).upto(beginning_of_week(last + 7, first_weekday) - 1)  do |d|
       cal << %(<td class="#{options[:other_month_class]})
       cal << " weekendDay" if weekend?(d)
-      cal << %(">#{d.day}</td>)
+      if options[:accessible]
+        cal << %(">#{d.day}<span class='hidden'> #{Date::MONTHNAMES[d.mon]}</span></td>)
+      else
+        cal << %(">#{d.day}</td>)        
+      end
     end unless last.wday == last_weekday
     cal << "</tr></tbody></table>"
   end
